import React, { useState, useEffect } from 'react';
import { User, Lock, Briefcase, Clock, Target, Award, Download, LogOut, Plus, Calendar, TrendingUp, Activity, Star } from 'lucide-react';

const API_BASE = 'https://cmti-edge.online/M2C/Backend/Signin.php';

const Signin = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [loginData, setLoginData] = useState({ username: '', password: '' });
  const [loginError, setLoginError] = useState('');
  const [loading, setLoading] = useState(false);
  
  // Job assignment form state
  const [jobForm, setJobForm] = useState({
    job_name: '',
    target_parts: '',
    cycle_time: '',
    quality_estimation: ''
  });
  
  // Report form state
  const [reportForm, setReportForm] = useState({
    name: '',
    designation: '',
    staffId: ''
  });
  
  const [jobs, setJobs] = useState([]);
  const [message, setMessage] = useState('');

  // Check if user is already logged in
  useEffect(() => {
    const savedLogin = localStorage.getItem('isLoggedIn');
    if (savedLogin === 'true') {
      setIsLoggedIn(true);
      fetchJobs();
    }
  }, []);

  // Fetch jobs from API
  const fetchJobs = async () => {
    try {
      const response = await fetch(`${API_BASE}?api=true`, {
      credentials: 'include' // Add this
    });
      const data = await response.json();
      setJobs(Array.isArray(data) ? data : []);
    } catch (error) {
      console.error('Error fetching jobs:', error);
      setJobs([]);
    }
  };

  // Handle login
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setLoginError('');

    // Check credentials
    if (loginData.username === 'cmti.57@res.in' && loginData.password === 'admin') {
      localStorage.setItem('isLoggedIn', 'true');
      setIsLoggedIn(true);
      await fetchJobs();
    } else {
      setLoginError('Invalid username or password');
    }
    setLoading(false);
  };

  // Handle logout
  const handleLogout = () => {
    localStorage.removeItem('isLoggedIn');
    setIsLoggedIn(false);
    setLoginData({ username: '', password: '' });
  };

  // Handle job form submission
  const handleJobSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');

    try {
      const response = await fetch(`${API_BASE}?api=true`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(jobForm)
      });

      const result = await response.json();
      if (result.success) {
        setMessage('Job assignment added successfully!');
        setJobForm({ job_name: '', target_parts: '', cycle_time: '', quality_estimation: '' });
        await fetchJobs();
      } else {
        setMessage('Failed to add job assignment');
      }
    } catch (error) {
      setMessage('Error adding job assignment');
    }
    setLoading(false);
  };

  // Generate PDF Report
  const generatePDFReport = () => {
    if (!reportForm.name || !reportForm.designation || !reportForm.staffId) {
      alert('Please fill all report fields');
      return;
    }

    // Create PDF content
    const pdfContent = `
      JOB ASSIGNMENTS REPORT
      =====================
      
      Generated by: ${reportForm.name}
      Designation: ${reportForm.designation}
      Staff ID: ${reportForm.staffId}
      Date: ${new Date().toLocaleDateString()}
      
      JOBS SUMMARY:
      ${jobs.map((job, index) => `
      ${index + 1}. Job: ${job.job_name}
         Target Parts: ${job.target_parts}
         Cycle Time: ${job.cycle_time} mins
         Quality Estimation: ${job.quality_estimation}
         Created: ${new Date(job.created_at).toLocaleDateString()}
      `).join('\n')}
      
      Total Jobs: ${jobs.length}
    `;

    // Create and download the PDF (simplified text version)
    const blob = new Blob([pdfContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Job_Report_${reportForm.staffId}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('Report generated successfully!');
  };

  // Login Page Component
  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-800 flex items-center justify-center p-4 relative overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-purple-600/20 to-pink-600/20 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-blue-600/20 to-cyan-600/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-br from-indigo-600/10 to-purple-600/10 rounded-full blur-3xl animate-pulse delay-500"></div>
        </div>

        <div className="bg-black/40 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-800/50 p-8 w-full max-w-md relative z-10 hover:bg-black/50 transition-all duration-500">
          {/* Gradient border effect */}
          <div className="absolute inset-0 rounded-3xl bg-gradient-to-r from-purple-600/50 via-pink-600/50 to-blue-600/50 opacity-75 blur-sm -z-10"></div>
          <div className="absolute inset-[2px] rounded-3xl bg-black/80 -z-10"></div>

          <div className="text-center mb-8">
            <div className="bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-6 backdrop-blur-sm border border-purple-500/30">
              <div className="bg-gradient-to-br from-purple-500 to-pink-500 rounded-full w-12 h-12 flex items-center justify-center">
                <User className="w-6 h-6 text-white" />
              </div>
            </div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-white via-gray-100 to-gray-300 bg-clip-text text-transparent mb-3">Manager Portal</h1>
            <p className="text-gray-400 text-lg">Job Management System</p>
            <div className="w-24 h-1 bg-gradient-to-r from-purple-500 to-pink-500 mx-auto mt-3 rounded-full"></div>
          </div>

          <form onSubmit={handleLogin} className="space-y-6">
            <div className="relative group">
              <User className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400 group-focus-within:text-purple-400 transition-colors duration-300" />
              <input
                type="email"
                placeholder="Username (Email)"
                value={loginData.username}
                onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}
                className="w-full pl-12 pr-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                required
              />
            </div>

            <div className="relative group">
              <Lock className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400 group-focus-within:text-purple-400 transition-colors duration-300" />
              <input
                type="password"
                placeholder="Password"
                value={loginData.password}
                onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}
                className="w-full pl-12 pr-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                required
              />
            </div>

            {loginError && (
              <div className="bg-red-900/30 border border-red-600/50 text-red-300 px-4 py-3 rounded-xl backdrop-blur-sm animate-shake">
                {loginError}
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-purple-700 hover:from-purple-700 hover:via-pink-700 hover:to-purple-800 text-white font-semibold py-4 rounded-xl transition-all duration-300 transform hover:scale-[1.02] hover:shadow-2xl hover:shadow-purple-500/25 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden"
            >
              <span className="relative z-10">{loading ? 'Signing In...' : 'Access Dashboard'}</span>
              <div className="absolute inset-0 bg-gradient-to-r from-pink-600/20 to-purple-600/20 opacity-0 hover:opacity-100 transition-opacity duration-300"></div>
            </button>
          </form>

          <div className="mt-8 text-center">
            <div className="bg-gray-900/30 rounded-xl p-4 border border-gray-700/30 backdrop-blur-sm">
              <p className="text-gray-400 text-sm mb-2">Demo Credentials:</p>
              <div className="space-y-1">
                <p className="text-purple-300 font-mono text-sm">cmti.57@res.in</p>
                <p className="text-pink-300 font-mono text-sm">admin</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Dashboard Component
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-800 relative">
      {/* Animated background */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 right-20 w-64 h-64 bg-gradient-to-br from-purple-600/10 to-pink-600/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 left-20 w-64 h-64 bg-gradient-to-br from-blue-600/10 to-cyan-600/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
      </div>

      {/* Header */}
      <header className="bg-black/50 backdrop-blur-xl border-b border-gray-800/50 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center">
              <div className="bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl w-12 h-12 flex items-center justify-center mr-4 shadow-lg shadow-purple-500/25">
                <Briefcase className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">Job Management</h1>
                <p className="text-gray-500 text-sm">Advanced Control Panel</p>
              </div>
            </div>
            <button
              onClick={handleLogout}
              className="flex items-center px-6 py-3 text-gray-400 hover:text-red-400 transition-all duration-300 bg-gray-900/30 hover:bg-red-900/20 rounded-xl border border-gray-700/30 hover:border-red-500/30 backdrop-blur-sm"
            >
              <LogOut className="w-5 h-5 mr-2" />
              Logout
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10">
        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-black/40 backdrop-blur-xl rounded-2xl p-6 border border-gray-800/50 hover:bg-black/50 transition-all duration-300 group">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Total Jobs</p>
                <p className="text-3xl font-bold text-white group-hover:text-purple-400 transition-colors duration-300">{jobs.length}</p>
              </div>
              <div className="bg-purple-500/20 rounded-xl w-12 h-12 flex items-center justify-center group-hover:bg-purple-500/30 transition-colors duration-300">
                <Briefcase className="w-6 h-6 text-purple-400" />
              </div>
            </div>
          </div>

          <div className="bg-black/40 backdrop-blur-xl rounded-2xl p-6 border border-gray-800/50 hover:bg-black/50 transition-all duration-300 group">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Avg Quality</p>
                <p className="text-3xl font-bold text-white group-hover:text-green-400 transition-colors duration-300">
                  {jobs.length > 0 ? Math.round(jobs.reduce((sum, job) => sum + parseInt(job.quality_estimation || 0), 0) / jobs.length) : 0}%
                </p>
              </div>
              <div className="bg-green-500/20 rounded-xl w-12 h-12 flex items-center justify-center group-hover:bg-green-500/30 transition-colors duration-300">
                <Star className="w-6 h-6 text-green-400" />
              </div>
            </div>
          </div>

          <div className="bg-black/40 backdrop-blur-xl rounded-2xl p-6 border border-gray-800/50 hover:bg-black/50 transition-all duration-300 group">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Total Parts</p>
                <p className="text-3xl font-bold text-white group-hover:text-blue-400 transition-colors duration-300">
                  {jobs.reduce((sum, job) => sum + parseInt(job.target_parts || 0), 0)}
                </p>
              </div>
              <div className="bg-blue-500/20 rounded-xl w-12 h-12 flex items-center justify-center group-hover:bg-blue-500/30 transition-colors duration-300">
                <Target className="w-6 h-6 text-blue-400" />
              </div>
            </div>
          </div>

          <div className="bg-black/40 backdrop-blur-xl rounded-2xl p-6 border border-gray-800/50 hover:bg-black/50 transition-all duration-300 group">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Productivity</p>
                <p className="text-3xl font-bold text-white group-hover:text-orange-400 transition-colors duration-300">High</p>
              </div>
              <div className="bg-orange-500/20 rounded-xl w-12 h-12 flex items-center justify-center group-hover:bg-orange-500/30 transition-colors duration-300">
                <TrendingUp className="w-6 h-6 text-orange-400" />
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
          {/* Left Side - Job Assignment */}
          <div className="bg-black/40 backdrop-blur-xl rounded-3xl border border-gray-800/50 overflow-hidden hover:bg-black/50 transition-all duration-500 group">
            <div className="bg-gradient-to-r from-purple-600/20 via-pink-600/20 to-purple-600/20 px-8 py-6 border-b border-gray-800/50">
              <div className="flex items-center">
                <div className="bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl w-10 h-10 flex items-center justify-center mr-4">
                  <Plus className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">Job Assignment</h2>
                  <p className="text-gray-400">Create new job assignments</p>
                </div>
              </div>
            </div>

            <form onSubmit={handleJobSubmit} className="p-8 space-y-6">
              <div className="grid grid-cols-1 gap-6">
                <div className="relative group">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Job Name
                  </label>
                  <Briefcase className="absolute left-4 top-12 w-5 h-5 text-gray-500 group-focus-within:text-purple-400 transition-colors duration-300" />
                  <input
                    type="text"
                    value={jobForm.job_name}
                    onChange={(e) => setJobForm({ ...jobForm, job_name: e.target.value })}
                    className="w-full pl-12 pr-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                    placeholder="Enter job name"
                    required
                  />
                </div>

                <div className="relative group">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Target Parts
                  </label>
                  <Target className="absolute left-4 top-12 w-5 h-5 text-gray-500 group-focus-within:text-blue-400 transition-colors duration-300" />
                  <input
                    type="number"
                    value={jobForm.target_parts}
                    onChange={(e) => setJobForm({ ...jobForm, target_parts: e.target.value })}
                    className="w-full pl-12 pr-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                    placeholder="Enter target parts"
                    required
                  />
                </div>

                <div className="relative group">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Cycle Time (mins)
                  </label>
                  <Clock className="absolute left-4 top-12 w-5 h-5 text-gray-500 group-focus-within:text-green-400 transition-colors duration-300" />
                  <input
                    type="number"
                    step="0.01"
                    value={jobForm.cycle_time}
                    onChange={(e) => setJobForm({ ...jobForm, cycle_time: e.target.value })}
                    className="w-full pl-12 pr-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:ring-2 focus:ring-green-500/50 focus:border-green-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                    placeholder="Enter cycle time"
                    required
                  />
                </div>

                <div className="relative group">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Quality Estimation
                  </label>
                  <Award className="absolute left-4 top-12 w-5 h-5 text-gray-500 group-focus-within:text-yellow-400 transition-colors duration-300" />
                  <input
                    type="number"
                    value={jobForm.quality_estimation}
                    onChange={(e) => setJobForm({ ...jobForm, quality_estimation: e.target.value })}
                    className="w-full pl-12 pr-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:ring-2 focus:ring-yellow-500/50 focus:border-yellow-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                    placeholder="Enter quality estimation"
                    required
                  />
                </div>
              </div>

              {message && (
                <div className={`px-6 py-4 rounded-xl backdrop-blur-sm animate-fade-in ${
                  message.includes('success') 
                    ? 'bg-green-900/30 text-green-300 border border-green-600/50' 
                    : 'bg-red-900/30 text-red-300 border border-red-600/50'
                }`}>
                  {message}
                </div>
              )}

              <button
                type="submit"
                disabled={loading}
                className="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-purple-700 hover:from-purple-700 hover:via-pink-700 hover:to-purple-800 text-white font-semibold py-4 rounded-xl transition-all duration-300 transform hover:scale-[1.02] hover:shadow-2xl hover:shadow-purple-500/25 disabled:opacity-50 relative overflow-hidden"
              >
                <span className="relative z-10">{loading ? 'Adding Job...' : 'Submit Job Assignment'}</span>
                <div className="absolute inset-0 bg-gradient-to-r from-pink-600/20 to-purple-600/20 opacity-0 hover:opacity-100 transition-opacity duration-300"></div>
              </button>
            </form>
          </div>

          {/* Right Side - Report Generation */}
          <div className="bg-black/40 backdrop-blur-xl rounded-3xl border border-gray-800/50 overflow-hidden hover:bg-black/50 transition-all duration-500">
            <div className="bg-gradient-to-r from-green-600/20 via-emerald-600/20 to-green-600/20 px-8 py-6 border-b border-gray-800/50">
              <div className="flex items-center">
                <div className="bg-gradient-to-br from-green-500 to-emerald-500 rounded-xl w-10 h-10 flex items-center justify-center mr-4">
                  <Download className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">Generate Report</h2>
                  <p className="text-gray-400">Download comprehensive reports</p>
                </div>
              </div>
            </div>

            <div className="p-8 space-y-6">
              <div className="grid grid-cols-1 gap-6">
                <div className="group">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Your Name
                  </label>
                  <input
                    type="text"
                    value={reportForm.name}
                    onChange={(e) => setReportForm({ ...reportForm, name: e.target.value })}
                    className="w-full px-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:ring-2 focus:ring-green-500/50 focus:border-green-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                    placeholder="Enter your name"
                  />
                </div>

                <div className="group">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Designation
                  </label>
                  <input
                    type="text"
                    value={reportForm.designation}
                    onChange={(e) => setReportForm({ ...reportForm, designation: e.target.value })}
                    className="w-full px-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:ring-2 focus:ring-green-500/50 focus:border-green-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                    placeholder="Enter your designation"
                  />
                </div>

                <div className="group">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Staff ID
                  </label>
                  <input
                    type="text"
                    value={reportForm.staffId}
                    onChange={(e) => setReportForm({ ...reportForm, staffId: e.target.value })}
                    className="w-full px-4 py-4 bg-gray-900/50 border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:ring-2 focus:ring-green-500/50 focus:border-green-500/50 backdrop-blur-sm transition-all duration-300 hover:bg-gray-800/50"
                    placeholder="Enter your staff ID"
                  />
                </div>
              </div>

              <button
                onClick={generatePDFReport}
                className="w-full bg-gradient-to-r from-green-600 via-emerald-600 to-green-700 hover:from-green-700 hover:via-emerald-700 hover:to-green-800 text-white font-semibold py-4 rounded-xl transition-all duration-300 transform hover:scale-[1.02] hover:shadow-2xl hover:shadow-green-500/25 flex items-center justify-center relative overflow-hidden"
              >
                <Download className="w-5 h-5 mr-2" />
                <span className="relative z-10">Download Report</span>
                <div className="absolute inset-0 bg-gradient-to-r from-emerald-600/20 to-green-600/20 opacity-0 hover:opacity-100 transition-opacity duration-300"></div>
              </button>

              {/* Jobs Summary */}
              <div className="mt-8 border-t border-gray-800/50 pt-8">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-xl font-semibold text-white">Active Jobs</h3>
                  <span className="bg-purple-500/20 text-purple-300 px-3 py-1 rounded-full text-sm font-medium">
                    {jobs.length} Total
                  </span>
                </div>
                <div className="space-y-4 max-h-80 overflow-y-auto custom-scrollbar">
                  {jobs.length > 0 ? jobs.map((job, index) => (
                    <div key={job.id || index} className="bg-gray-900/50 rounded-xl p-5 border border-gray-700/50 hover:bg-gray-800/50 transition-all duration-300 group backdrop-blur-sm">
                      <div className="flex items-start justify-between mb-3">
                        <h4 className="font-semibold text-white text-lg group-hover:text-purple-300 transition-colors duration-300">{job.job_name}</h4>
                        <div className="bg-green-500/20 text-green-300 px-2 py-1 rounded-lg text-xs font-medium">
                          Active
                        </div>
                      </div>
                      <div className="grid grid-cols-2 gap-3 text-sm">
                        <div className="flex items-center text-gray-400">
                          <Target className="w-4 h-4 mr-2 text-blue-400" />
                          <span>{job.target_parts} parts</span>
                        </div>
                        <div className="flex items-center text-gray-400">
                          <Clock className="w-4 h-4 mr-2 text-green-400" />
                          <span>{job.cycle_time}m cycle</span>
                        </div>
                        <div className="flex items-center text-gray-400">
                          <Award className="w-4 h-4 mr-2 text-yellow-400" />
                          <span>{job.quality_estimation}% quality</span>
                        </div>
                        <div className="flex items-center text-gray-400">
                          <Calendar className="w-4 h-4 mr-2 text-purple-400" />
                          <span>{job.created_at ? new Date(job.created_at).toLocaleDateString() : 'Today'}</span>
                        </div>
                      </div>
                      <div className="mt-4 flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                          <span className="text-xs text-green-400 font-medium">Processing</span>
                        </div>
                        <div className="flex items-center text-xs text-gray-500">
                          <Activity className="w-3 h-3 mr-1" />
                          Job #{index + 1}
                        </div>
                      </div>
                    </div>
                  )) : (
                    <div className="text-center py-12">
                      <div className="bg-gray-900/30 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                        <Briefcase className="w-8 h-8 text-gray-500" />
                      </div>
                      <p className="text-gray-500 text-lg mb-2">No jobs assigned yet</p>
                      <p className="text-gray-600 text-sm">Create your first job assignment to get started</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

 {/* Custom Styles */}
      <style>{`
        .custom-scrollbar::-webkit-scrollbar {
          width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: rgba(55, 65, 81, 0.3);
          border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: rgba(139, 92, 246, 0.5);
          border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: rgba(139, 92, 246, 0.8);
        }
        @keyframes fade-in {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          25% { transform: translateX(-5px); }
          75% { transform: translateX(5px); }
        }
        .animate-fade-in {
          animation: fade-in 0.5s ease-out;
        }
        .animate-shake {
          animation: shake 0.5s ease-in-out;
        }
      `}</style>
    </div>
  );
};

export default Signin;